"""
Interactive viewer for samples generated by calc_decoder_fid.py

This script provides an interactive matplotlib interface to compare real and generated samples
from the FID evaluation process. Users can navigate through samples and view side-by-side comparisons.

Usage:
python view_saved_samples.py --samples-dir path/to/saved/samples
"""

import os
import click
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
import glob

class SampleViewer:
    def __init__(self, samples_dir):
        self.samples_dir = samples_dir
        self.sample_pairs = self._load_sample_pairs()
        self.current_idx = 0
        
        if not self.sample_pairs:
            raise ValueError(f"No sample pairs found in {samples_dir}")
        
        self.fig, (self.ax1, self.ax2) = plt.subplots(1, 2, figsize=(12, 6))
        self.fig.canvas.mpl_connect('key_press_event', self._on_key_press)
        
    def _load_sample_pairs(self):
        """Load all real/fake sample pairs from the directory."""
        fake_files = sorted(glob.glob(os.path.join(self.samples_dir, "*_fake.png")))
        pairs = []
        
        for fake_file in fake_files:
            base_name = os.path.basename(fake_file).replace("_fake.png", "")
            real_file = os.path.join(self.samples_dir, f"{base_name}_real.png")
            
            if os.path.exists(real_file):
                pairs.append((real_file, fake_file))
        
        return pairs
    
    def _display_current_sample(self):
        """Display the current sample pair."""
        if not self.sample_pairs:
            return
            
        real_path, fake_path = self.sample_pairs[self.current_idx]
        
        # Load images
        real_img = np.array(Image.open(real_path))
        fake_img = np.array(Image.open(fake_path))
        
        # Clear axes
        self.ax1.clear()
        self.ax2.clear()
        
        # Display images
        self.ax1.imshow(real_img, cmap='gray' if len(real_img.shape) == 2 else None)
        self.ax1.set_title(f"Real Sample {self.current_idx + 1}/{len(self.sample_pairs)}")
        self.ax1.axis('off')
        
        self.ax2.imshow(fake_img, cmap='gray' if len(fake_img.shape) == 2 else None)
        self.ax2.set_title(f"Generated Sample {self.current_idx + 1}/{len(self.sample_pairs)}")
        self.ax2.axis('off')
        
        self.fig.suptitle(f"Sample Comparison - Use arrow keys to navigate")
        plt.tight_layout()
        self.fig.canvas.draw()
    
    def _on_key_press(self, event):
        """Handle keyboard navigation."""
        if event.key == 'right' or event.key == 'down':
            self.current_idx = (self.current_idx + 1) % len(self.sample_pairs)
            self._display_current_sample()
        elif event.key == 'left' or event.key == 'up':
            self.current_idx = (self.current_idx - 1) % len(self.sample_pairs)
            self._display_current_sample()
        elif event.key == 'q' or event.key == 'escape':
            plt.close(self.fig)
    
    def show(self):
        """Start the interactive viewer."""
        print(f"Loaded {len(self.sample_pairs)} sample pairs")
        print("Navigation: Arrow keys (left/right or up/down)")
        print("Quit: 'q' or 'escape'")
        
        self._display_current_sample()
        plt.show()

@click.command()
@click.argument("samples-dir", type=click.Path(exists=True, file_okay=False), required=True)
def view_samples_cli(samples_dir):
    """Interactive viewer for FID evaluation samples."""
    try:
        viewer = SampleViewer(samples_dir)
        viewer.show()
    except ValueError as e:
        print(f"Error: {e}")
        return
    except KeyboardInterrupt:
        print("\nViewer closed by user")

if __name__ == "__main__":
    view_samples_cli()
